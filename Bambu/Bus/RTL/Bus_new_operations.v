// 
// Politecnico di Milano
// Code created using PandA - Version: PandA 0.9.6 - Revision 5e5e306b86383a7d85274d64977a3d71fdcff4fe-master - Date 2021-03-21T11:28:24
// /opt/panda/bin/bambu executed with: /opt/panda/bin/bambu --top-fname=Bus_new_operations --writer H --generate-interface=INFER ../Bus_new_Final.cpp 
// 
// Send any bug to: panda-info@polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_LGPLv3.
// They are all part of the BAMBU/PANDA IP LIBRARY.
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the PandA framework; see the files COPYING.LIB
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

`ifdef __ICARUS__
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VERILATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef MODEL_TECH
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VCS
  `define _SIM_HAVE_CLOG2
`endif
`ifdef NCVERILOG
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_SIMULATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_ISIM
  `define _SIM_HAVE_CLOG2
`endif

// Interface module for function: master_in_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module master_in_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _master_in_notify, _master_in_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _master_in_notify;
  output _master_in_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__master_in_notify;
  assign _master_in_notify = reg__master_in_notify;
  always @(*)
  begin
    reg__master_in_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__master_in_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__master_in_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__master_in_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _master_in_notify_vld = |start_port;
  

endmodule

// Interface module for function: master_out_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module master_out_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _master_out_notify, _master_out_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _master_out_notify;
  output _master_out_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__master_out_notify;
  assign _master_out_notify = reg__master_out_notify;
  always @(*)
  begin
    reg__master_out_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__master_out_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__master_out_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__master_out_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _master_out_notify_vld = |start_port;
  

endmodule

// Interface module for function: req_addr_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module req_addr_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _req_addr, _req_addr_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output [31:0] _req_addr;
  output _req_addr_vld;
  integer ii=0;
  reg [32-1:0] reg__req_addr;
  assign _req_addr = reg__req_addr;
  always @(*)
  begin
    reg__req_addr = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__req_addr = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=32)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__req_addr^((((BITSIZE_in2>=32?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(32<BITSIZE_in2 ? 1 : 32-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__req_addr) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>32) ? ((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _req_addr_vld = |start_port;
  

endmodule

// Interface module for function: req_data_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module req_data_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _req_data, _req_data_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output [31:0] _req_data;
  output _req_data_vld;
  integer ii=0;
  reg [32-1:0] reg__req_data;
  assign _req_data = reg__req_data;
  always @(*)
  begin
    reg__req_data = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__req_data = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=32)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__req_data^((((BITSIZE_in2>=32?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(32<BITSIZE_in2 ? 1 : 32-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__req_data) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>32) ? ((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _req_data_vld = |start_port;
  

endmodule

// Interface module for function: req_trans_type_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module req_trans_type_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _req_trans_type, _req_trans_type_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _req_trans_type;
  output _req_trans_type_vld;
  integer ii=0;
  reg [1-1:0] reg__req_trans_type;
  assign _req_trans_type = reg__req_trans_type;
  always @(*)
  begin
    reg__req_trans_type = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__req_trans_type = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__req_trans_type^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__req_trans_type) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _req_trans_type_vld = |start_port;
  

endmodule

// Interface module for function: resp_ack_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module resp_ack_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _resp_ack, _resp_ack_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output [7:0] _resp_ack;
  output _resp_ack_vld;
  integer ii=0;
  reg [8-1:0] reg__resp_ack;
  assign _resp_ack = reg__resp_ack;
  always @(*)
  begin
    reg__resp_ack = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__resp_ack = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=8)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__resp_ack^((((BITSIZE_in2>=8?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(8<BITSIZE_in2 ? 1 : 8-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__resp_ack) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>8) ? ((({(8){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(8){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(8-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(8-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _resp_ack_vld = |start_port;
  

endmodule

// Interface module for function: resp_data_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module resp_data_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _resp_data, _resp_data_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output [31:0] _resp_data;
  output _resp_data_vld;
  integer ii=0;
  reg [32-1:0] reg__resp_data;
  assign _resp_data = reg__resp_data;
  always @(*)
  begin
    reg__resp_data = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__resp_data = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=32)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__resp_data^((((BITSIZE_in2>=32?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(32<BITSIZE_in2 ? 1 : 32-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__resp_data) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>32) ? ((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _resp_data_vld = |start_port;
  

endmodule

// Interface module for function: slave_in0_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_in0_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_in0_notify, _slave_in0_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_in0_notify;
  output _slave_in0_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_in0_notify;
  assign _slave_in0_notify = reg__slave_in0_notify;
  always @(*)
  begin
    reg__slave_in0_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_in0_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_in0_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_in0_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_in0_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_in1_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_in1_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_in1_notify, _slave_in1_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_in1_notify;
  output _slave_in1_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_in1_notify;
  assign _slave_in1_notify = reg__slave_in1_notify;
  always @(*)
  begin
    reg__slave_in1_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_in1_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_in1_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_in1_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_in1_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_in2_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_in2_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_in2_notify, _slave_in2_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_in2_notify;
  output _slave_in2_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_in2_notify;
  assign _slave_in2_notify = reg__slave_in2_notify;
  always @(*)
  begin
    reg__slave_in2_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_in2_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_in2_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_in2_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_in2_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_in3_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_in3_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_in3_notify, _slave_in3_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_in3_notify;
  output _slave_in3_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_in3_notify;
  assign _slave_in3_notify = reg__slave_in3_notify;
  always @(*)
  begin
    reg__slave_in3_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_in3_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_in3_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_in3_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_in3_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_out0_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_out0_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_out0_notify, _slave_out0_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_out0_notify;
  output _slave_out0_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_out0_notify;
  assign _slave_out0_notify = reg__slave_out0_notify;
  always @(*)
  begin
    reg__slave_out0_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_out0_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_out0_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_out0_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_out0_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_out1_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_out1_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_out1_notify, _slave_out1_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_out1_notify;
  output _slave_out1_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_out1_notify;
  assign _slave_out1_notify = reg__slave_out1_notify;
  always @(*)
  begin
    reg__slave_out1_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_out1_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_out1_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_out1_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_out1_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_out2_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_out2_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_out2_notify, _slave_out2_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_out2_notify;
  output _slave_out2_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_out2_notify;
  assign _slave_out2_notify = reg__slave_out2_notify;
  always @(*)
  begin
    reg__slave_out2_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_out2_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_out2_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_out2_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_out2_notify_vld = |start_port;
  

endmodule

// Interface module for function: slave_out3_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module slave_out3_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _slave_out3_notify, _slave_out3_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _slave_out3_notify;
  output _slave_out3_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__slave_out3_notify;
  assign _slave_out3_notify = reg__slave_out3_notify;
  always @(*)
  begin
    reg__slave_out3_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__slave_out3_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__slave_out3_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__slave_out3_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _slave_out3_notify_vld = |start_port;
  

endmodule


