// 
// Politecnico di Milano
// Code created using PandA - Version: PandA 0.9.6 - Revision 5e5e306b86383a7d85274d64977a3d71fdcff4fe-master - Date 2021-01-30T11:57:16
// /opt/panda/bin/bambu executed with: /opt/panda/bin/bambu --top-fname=ADDING_operations --writer H --generate-interface=INFER ../ADDING_FABRIZIO.cpp 
// 
// Send any bug to: panda-info@polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_LGPLv3.
// They are all part of the BAMBU/PANDA IP LIBRARY.
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the PandA framework; see the files COPYING.LIB
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

`ifdef __ICARUS__
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VERILATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef MODEL_TECH
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VCS
  `define _SIM_HAVE_CLOG2
`endif
`ifdef NCVERILOG
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_SIMULATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_ISIM
  `define _SIM_HAVE_CLOG2
`endif

// Interface module for function: x_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module x_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _x_notify, _x_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _x_notify;
  output _x_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__x_notify;
  assign _x_notify = reg__x_notify;
  always @(*)
  begin
    reg__x_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__x_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__x_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__x_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _x_notify_vld = |start_port;
  

endmodule

// Interface module for function: z_notify_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module z_notify_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _z_notify, _z_notify_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output _z_notify;
  output _z_notify_vld;
  integer ii=0;
  reg [1-1:0] reg__z_notify;
  assign _z_notify = reg__z_notify;
  always @(*)
  begin
    reg__z_notify = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__z_notify = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=1)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__z_notify^((((BITSIZE_in2>=1?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(1<BITSIZE_in2 ? 1 : 1-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__z_notify) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>1) ? ((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(1){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(1-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _z_notify_vld = |start_port;
  

endmodule

// Interface module for function: z_sig_bambu_artificial_ParmMgr_Write_valid
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module z_sig_bambu_artificial_ParmMgr_Write_valid_VECTOR_BOOL32(start_port, in1, in2, in3, _z_sig, _z_sig_vld);
  parameter BITSIZE_in1=1, PORTSIZE_in1=1, BITSIZE_in2=1, PORTSIZE_in2=1, BITSIZE_in3=32, PORTSIZE_in3=1;
  // IN
  input [0:0] start_port;
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  input [(PORTSIZE_in2*BITSIZE_in2)+(-1):0] in2;
  input [(PORTSIZE_in3*BITSIZE_in3)+(-1):0] in3;
  // OUT
  output [31:0] _z_sig;
  output _z_sig_vld;
  integer ii=0;
  reg [32-1:0] reg__z_sig;
  assign _z_sig = reg__z_sig;
  always @(*)
  begin
    reg__z_sig = 0;
    for(ii=0; ii<PORTSIZE_in1; ii=ii+1)
    begin
      reg__z_sig = (in1[(BITSIZE_in1)*ii+:BITSIZE_in1]>=32)?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:(reg__z_sig^((((BITSIZE_in2>=32?in2[(BITSIZE_in2)*ii+:BITSIZE_in2]:{{(32<BITSIZE_in2 ? 1 : 32-BITSIZE_in2){1'b0}},in2[(BITSIZE_in2)*ii+:BITSIZE_in2]})<<in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)^reg__z_sig) & (((in1[(BITSIZE_in1)*ii+:BITSIZE_in1]+in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)>32) ? ((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)) : ((((({(32){1'b1}})>>(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))<<(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8))>>(32-in1[(BITSIZE_in1)*ii+:BITSIZE_in1]-in3[(BITSIZE_in3)*ii+:BITSIZE_in3]*8)))));
    end
  end
  assign _z_sig_vld = |start_port;
  

endmodule


