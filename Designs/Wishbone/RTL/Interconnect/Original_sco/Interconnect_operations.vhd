-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Interconnect_operations is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    slave_in3_sig_ack : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in3_sig_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    slave_in3_sig_err : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in0_sig_ack : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in0_sig_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    slave_in0_sig_err : IN STD_LOGIC_VECTOR (0 downto 0);
    master_input_sig_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    master_input_sig_cyc : IN STD_LOGIC_VECTOR (0 downto 0);
    master_input_sig_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    master_input_sig_stb : IN STD_LOGIC_VECTOR (0 downto 0);
    master_input_sig_we : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in1_sig_ack : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in1_sig_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    slave_in1_sig_err : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in2_sig_ack : IN STD_LOGIC_VECTOR (0 downto 0);
    slave_in2_sig_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    slave_in2_sig_err : IN STD_LOGIC_VECTOR (0 downto 0);
    master_output_sig_ack : OUT STD_LOGIC;
    master_output_sig_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    master_output_sig_err : OUT STD_LOGIC;
    slave_out0_sig_addr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out0_sig_cyc : OUT STD_LOGIC;
    slave_out0_sig_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out0_sig_stb : OUT STD_LOGIC;
    slave_out0_sig_we : OUT STD_LOGIC;
    slave_out1_sig_addr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out1_sig_cyc : OUT STD_LOGIC;
    slave_out1_sig_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out1_sig_stb : OUT STD_LOGIC;
    slave_out1_sig_we : OUT STD_LOGIC;
    slave_out2_sig_addr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out2_sig_cyc : OUT STD_LOGIC;
    slave_out2_sig_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out2_sig_stb : OUT STD_LOGIC;
    slave_out2_sig_we : OUT STD_LOGIC;
    slave_out3_sig_addr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out3_sig_cyc : OUT STD_LOGIC;
    slave_out3_sig_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    slave_out3_sig_stb : OUT STD_LOGIC;
    slave_out3_sig_we : OUT STD_LOGIC;
    from_master_addr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    from_master_cyc : OUT STD_LOGIC;
    from_master_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    from_master_stb : OUT STD_LOGIC;
    from_master_we : OUT STD_LOGIC;
    section : OUT STD_LOGIC_VECTOR (1 downto 0);
    nextsection : OUT STD_LOGIC_VECTOR (1 downto 0);
    slave_number_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    to_master_ack : OUT STD_LOGIC;
    to_master_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    to_master_err : OUT STD_LOGIC;
    active_operation : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of Interconnect_operations is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Interconnect_operations,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.483000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=410,HLS_SYN_LUT=590,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_FFFFFFF0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110000";
    constant ap_const_lv32_FFFFFFF8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal from_master_reg_addr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal from_master_reg_cyc : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal from_master_reg_data : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal from_master_reg_stb : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal from_master_reg_we : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal nextsection_reg : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal to_master_reg_ack : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal to_master_reg_data_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal to_master_reg_err : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal master_output_sig_re_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal master_output_sig_re_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal master_output_sig_re : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out0_sig_reg_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out0_sig_reg_c : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out0_sig_reg_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out0_sig_reg_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out0_sig_reg_w : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out1_sig_reg_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out1_sig_reg_c : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out1_sig_reg_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out1_sig_reg_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out1_sig_reg_w : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out2_sig_reg_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out2_sig_reg_c : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out2_sig_reg_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out2_sig_reg_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out2_sig_reg_w : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out3_sig_reg_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out3_sig_reg_c : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out3_sig_reg_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal slave_out3_sig_reg_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal slave_out3_sig_reg_w : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal section_reg : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal slave_number_reg_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal active_operation_rea_read_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_fu_1298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_fu_1262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_2_fu_1226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;


    from_master_reg_addr_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            from_master_reg_addr <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_addr <= ap_const_lv32_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_addr <= master_input_sig_addr_V;
            end if; 
        end if;
    end process;


    from_master_reg_cyc_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            from_master_reg_cyc <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_cyc <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_cyc <= master_input_sig_cyc;
            end if; 
        end if;
    end process;


    from_master_reg_data_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            from_master_reg_data <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_data <= ap_const_lv32_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_data <= master_input_sig_data_V;
            end if; 
        end if;
    end process;


    from_master_reg_stb_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            from_master_reg_stb <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_stb <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_stb <= master_input_sig_stb;
            end if; 
        end if;
    end process;


    from_master_reg_we_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            from_master_reg_we <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_we <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                from_master_reg_we <= master_input_sig_we;
            end if; 
        end if;
    end process;


    master_output_sig_re_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            master_output_sig_re <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re <= slave_in2_sig_err;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re <= slave_in3_sig_err;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re <= slave_in0_sig_err;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re <= slave_in1_sig_err;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)))) then 
                master_output_sig_re <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re <= to_master_reg_err;
            end if; 
        end if;
    end process;


    master_output_sig_re_1_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            master_output_sig_re_1 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= ap_const_lv1_1;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= slave_in2_sig_ack;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= slave_in3_sig_ack;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= slave_in0_sig_ack;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= slave_in1_sig_ack;
                elsif ((ap_const_lv4_E = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= ap_const_lv1_0;
                elsif ((ap_const_lv4_F = active_operation_rea_read_fu_250_p2)) then 
                    master_output_sig_re_1 <= to_master_reg_ack;
                end if;
            end if; 
        end if;
    end process;


    master_output_sig_re_2_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            master_output_sig_re_2 <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re_2 <= slave_in2_sig_data_V;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re_2 <= slave_in3_sig_data_V;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re_2 <= slave_in0_sig_data_V;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re_2 <= slave_in1_sig_data_V;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)))) then 
                master_output_sig_re_2 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2))) then 
                master_output_sig_re_2 <= to_master_reg_data_V;
            end if; 
        end if;
    end process;


    nextsection_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            nextsection_reg <= ap_const_lv2_1;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)))) then 
                nextsection_reg <= ap_const_lv2_3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)))) then 
                nextsection_reg <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2))) then 
                nextsection_reg <= ap_const_lv2_1;
            end if; 
        end if;
    end process;


    section_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            section_reg <= ap_const_lv2_1;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)))) then 
                section_reg <= ap_const_lv2_3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)))) then 
                section_reg <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2))) then 
                section_reg <= ap_const_lv2_1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_5 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_F = active_operation_rea_read_fu_250_p2)))) then 
                section_reg <= nextsection_reg;
            end if; 
        end if;
    end process;


    slave_number_reg_V_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_number_reg_V(0) <= '0';
            slave_number_reg_V(1) <= '0';
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)))) then 
                slave_number_reg_V(0) <= '0';
                slave_number_reg_V(1) <= '1';
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)))) then 
                slave_number_reg_V(0) <= '1';
                slave_number_reg_V(1) <= '1';
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                slave_number_reg_V(0) <= '0';
                slave_number_reg_V(1) <= '0';
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)))) then 
                slave_number_reg_V(0) <= '1';
                slave_number_reg_V(1) <= '0';
            end if; 
        end if;
    end process;


    slave_out0_sig_reg_a_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out0_sig_reg_a <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_a <= master_input_sig_addr_V;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_a <= from_master_reg_addr;
                end if;
            end if; 
        end if;
    end process;


    slave_out0_sig_reg_c_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out0_sig_reg_c <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_c <= master_input_sig_cyc;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_c <= from_master_reg_cyc;
                end if;
            end if; 
        end if;
    end process;


    slave_out0_sig_reg_d_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out0_sig_reg_d <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_d <= master_input_sig_data_V;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_d <= from_master_reg_data;
                end if;
            end if; 
        end if;
    end process;


    slave_out0_sig_reg_s_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out0_sig_reg_s <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_s <= master_input_sig_stb;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_s <= from_master_reg_stb;
                end if;
            end if; 
        end if;
    end process;


    slave_out0_sig_reg_w_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out0_sig_reg_w <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_0 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_w <= master_input_sig_we;
                elsif ((ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) then 
                    slave_out0_sig_reg_w <= from_master_reg_we;
                end if;
            end if; 
        end if;
    end process;


    slave_out1_sig_reg_a_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out1_sig_reg_a <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_a <= add_ln68_fu_1298_p2;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_a <= from_master_reg_addr;
                end if;
            end if; 
        end if;
    end process;


    slave_out1_sig_reg_c_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out1_sig_reg_c <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_c <= master_input_sig_cyc;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_c <= from_master_reg_cyc;
                end if;
            end if; 
        end if;
    end process;


    slave_out1_sig_reg_d_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out1_sig_reg_d <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_d <= master_input_sig_data_V;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_d <= from_master_reg_data;
                end if;
            end if; 
        end if;
    end process;


    slave_out1_sig_reg_s_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out1_sig_reg_s <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_s <= master_input_sig_stb;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_s <= from_master_reg_stb;
                end if;
            end if; 
        end if;
    end process;


    slave_out1_sig_reg_w_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out1_sig_reg_w <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_1 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_w <= master_input_sig_we;
                elsif ((ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) then 
                    slave_out1_sig_reg_w <= from_master_reg_we;
                end if;
            end if; 
        end if;
    end process;


    slave_out2_sig_reg_a_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out2_sig_reg_a <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_a <= add_ln68_1_fu_1262_p2;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_a <= from_master_reg_addr;
                end if;
            end if; 
        end if;
    end process;


    slave_out2_sig_reg_c_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out2_sig_reg_c <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_c <= master_input_sig_cyc;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_c <= from_master_reg_cyc;
                end if;
            end if; 
        end if;
    end process;


    slave_out2_sig_reg_d_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out2_sig_reg_d <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_d <= master_input_sig_data_V;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_d <= from_master_reg_data;
                end if;
            end if; 
        end if;
    end process;


    slave_out2_sig_reg_s_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out2_sig_reg_s <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_s <= master_input_sig_stb;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_s <= from_master_reg_stb;
                end if;
            end if; 
        end if;
    end process;


    slave_out2_sig_reg_w_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out2_sig_reg_w <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_2 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_w <= master_input_sig_we;
                elsif ((ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out2_sig_reg_w <= from_master_reg_we;
                end if;
            end if; 
        end if;
    end process;


    slave_out3_sig_reg_a_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out3_sig_reg_a <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_a <= add_ln68_2_fu_1226_p2;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_a <= from_master_reg_addr;
                end if;
            end if; 
        end if;
    end process;


    slave_out3_sig_reg_c_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out3_sig_reg_c <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_c <= master_input_sig_cyc;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_c <= from_master_reg_cyc;
                end if;
            end if; 
        end if;
    end process;


    slave_out3_sig_reg_d_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out3_sig_reg_d <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_d <= master_input_sig_data_V;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_d <= from_master_reg_data;
                end if;
            end if; 
        end if;
    end process;


    slave_out3_sig_reg_s_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out3_sig_reg_s <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_s <= master_input_sig_stb;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_s <= from_master_reg_stb;
                end if;
            end if; 
        end if;
    end process;


    slave_out3_sig_reg_w_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            slave_out3_sig_reg_w <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv4_3 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_w <= master_input_sig_we;
                elsif ((ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) then 
                    slave_out3_sig_reg_w <= from_master_reg_we;
                end if;
            end if; 
        end if;
    end process;


    to_master_reg_ack_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            to_master_reg_ack <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2))) then 
                to_master_reg_ack <= ap_const_lv1_1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_ack <= slave_in2_sig_ack;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_ack <= slave_in3_sig_ack;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_ack <= slave_in0_sig_ack;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_ack <= slave_in1_sig_ack;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2))) then 
                to_master_reg_ack <= ap_const_lv1_0;
            end if; 
        end if;
    end process;


    to_master_reg_data_V_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            to_master_reg_data_V <= ap_const_lv32_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_data_V <= slave_in2_sig_data_V;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_data_V <= slave_in3_sig_data_V;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_data_V <= slave_in0_sig_data_V;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_data_V <= slave_in1_sig_data_V;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_data_V <= ap_const_lv32_0;
            end if; 
        end if;
    end process;


    to_master_reg_err_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            to_master_reg_err <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_7 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_8 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_err <= slave_in2_sig_err;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_9 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_A = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_err <= slave_in3_sig_err;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_B = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_C = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_err <= slave_in0_sig_err;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_D = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_6 = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_err <= slave_in1_sig_err;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_4 = active_operation_rea_read_fu_250_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv4_E = active_operation_rea_read_fu_250_p2)))) then 
                to_master_reg_err <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    slave_number_reg_V(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    active_operation_rea_read_fu_250_p2 <= active_operation;
    add_ln68_1_fu_1262_p2 <= std_logic_vector(unsigned(master_input_sig_addr_V) + unsigned(ap_const_lv32_FFFFFFF0));
    add_ln68_2_fu_1226_p2 <= std_logic_vector(unsigned(master_input_sig_addr_V) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln68_fu_1298_p2 <= std_logic_vector(unsigned(master_input_sig_addr_V) + unsigned(ap_const_lv32_FFFFFFF8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    from_master_addr_V <= from_master_reg_addr;
    from_master_cyc <= from_master_reg_cyc(0);
    from_master_data_V <= from_master_reg_data;
    from_master_stb <= from_master_reg_stb(0);
    from_master_we <= from_master_reg_we(0);
    master_output_sig_ack <= master_output_sig_re_1(0);
    master_output_sig_data_V <= master_output_sig_re_2;
    master_output_sig_err <= master_output_sig_re(0);
    nextsection <= nextsection_reg;
    section <= section_reg;
    slave_number_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slave_number_reg_V),32));
    slave_out0_sig_addr_V <= slave_out0_sig_reg_a;
    slave_out0_sig_cyc <= slave_out0_sig_reg_c(0);
    slave_out0_sig_data_V <= slave_out0_sig_reg_d;
    slave_out0_sig_stb <= slave_out0_sig_reg_s(0);
    slave_out0_sig_we <= slave_out0_sig_reg_w(0);
    slave_out1_sig_addr_V <= slave_out1_sig_reg_a;
    slave_out1_sig_cyc <= slave_out1_sig_reg_c(0);
    slave_out1_sig_data_V <= slave_out1_sig_reg_d;
    slave_out1_sig_stb <= slave_out1_sig_reg_s(0);
    slave_out1_sig_we <= slave_out1_sig_reg_w(0);
    slave_out2_sig_addr_V <= slave_out2_sig_reg_a;
    slave_out2_sig_cyc <= slave_out2_sig_reg_c(0);
    slave_out2_sig_data_V <= slave_out2_sig_reg_d;
    slave_out2_sig_stb <= slave_out2_sig_reg_s(0);
    slave_out2_sig_we <= slave_out2_sig_reg_w(0);
    slave_out3_sig_addr_V <= slave_out3_sig_reg_a;
    slave_out3_sig_cyc <= slave_out3_sig_reg_c(0);
    slave_out3_sig_data_V <= slave_out3_sig_reg_d;
    slave_out3_sig_stb <= slave_out3_sig_reg_s(0);
    slave_out3_sig_we <= slave_out3_sig_reg_w(0);
    to_master_ack <= to_master_reg_ack(0);
    to_master_data_V <= to_master_reg_data_V;
    to_master_err <= to_master_reg_err(0);
end behav;
