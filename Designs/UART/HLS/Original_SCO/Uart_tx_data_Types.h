#ifndef DATA_TYPES_H
#define DATA_TYPES_H

#include "ap_int.h"

// States
enum state {IDLE_1, DATA_NOTIFY_2, TRANSMITTING_START_3, TRANSMITTING_DATA_ZERO_4, TRANSMITTING_DATA_ONE_5, TRANSMITTING_DATA_TWO_6, TRANSMITTING_DATA_THREE_7, TRANSMITTING_DATA_FOUR_8, TRANSMITTING_DATA_FIVE_9, TRANSMITTING_DATA_SIX_10, TRANSMITTING_DATA_SEVEN_11, TRANSMITTING_PARITY_12, TRANSMITTING_STOP_FIRST_13, TRANSMITTING_STOP_SECOND_14, STOP_NOTIFY_15};

// Operations
enum operation {DATA_NOTIFY_2_4, IDLE_1_1, IDLE_1_2, IDLE_1_3, STOP_NOTIFY_15_19, TRANSMITTING_DATA_FIVE_9_11, TRANSMITTING_DATA_FOUR_8_10, TRANSMITTING_DATA_ONE_5_7, TRANSMITTING_DATA_SEVEN_11_13, TRANSMITTING_DATA_SEVEN_11_14, TRANSMITTING_DATA_SIX_10_12, TRANSMITTING_DATA_THREE_7_9, TRANSMITTING_DATA_TWO_6_8, TRANSMITTING_DATA_ZERO_4_6, TRANSMITTING_PARITY_12_15, TRANSMITTING_START_3_5, TRANSMITTING_STOP_FIRST_13_16, TRANSMITTING_STOP_FIRST_13_17, TRANSMITTING_STOP_SECOND_14_18, state_wait};

// Enum Types

// Compound Types
struct config_t {
	bool odd_parity;
	bool parity;
	bool two_stop_bits;
};

struct tx_control_t {
	bool active;
	bool cts;
};

struct tx_events_t {
	bool done;
};

struct data_t {
	ap_uint<32> data;
	bool valid;
};


// Constants

#endif //DATA_TYPES_H