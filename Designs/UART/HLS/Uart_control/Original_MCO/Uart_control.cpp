#include "ap_int.h"
#include "Uart_control_functions.h"
#include "Uart_control_data_types.h"

void Uart_control_operations(
	tasks_t tasks_in_sig,
	bus_req_t bus_in_sig,
	tx_events_t tx_events_in_sig,
	rx_events_t rx_events_in_sig,
	bool cts_in_sig,
	config_t &rx_config_out_sig,
	bus_resp_t &bus_out_sig,
	config_t &tx_config_out_sig,
	events_t &events_out_sig,
	bool in_rx_active_out_msg,
	tx_control_t in_tx_control_out_msg,
	ap_uint<32> in_frame_config,
	ap_uint<32> in_enable,
	ap_uint<32> in_error_src,
	bool in_rts_internal,
	bool &out_rx_active_out_msg,
	tx_control_t &out_tx_control_out_msg,
	ap_uint<32> &out_frame_config,
	ap_uint<32> &out_enable,
	ap_uint<32> &out_error_src,
	bool &out_rts_internal,
	bool &events_out_notify,
	operation active_operation
)
{
	switch (active_operation) {
	case IDLE_1_1:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_10:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_11:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_12:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_13:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_14:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = false;
		events_out_sig.error = false;
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_15:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_17:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_18:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_19:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_2:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_20:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_21:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_22:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = false;
		events_out_sig.error = false;
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_23:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_25:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_26:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_27:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_28:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_29:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_3:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_30:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		events_out_sig.cts = false;
		events_out_sig.error = false;
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_31:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_error_src = (in_error_src | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_33:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_34:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_35:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_36:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_37:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_38:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_39:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_4:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = false;
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_40:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_41:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_42:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_43:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_44:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_45:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_46:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_47:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_48:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_49:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_5:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_50:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_51:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_52:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_53:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_54:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_55:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_56:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (tasks_in_sig.start_rx || (in_rx_active_out_msg && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (tasks_in_sig.start_tx || (in_tx_control_out_msg.active && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_57:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_58:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_59:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_6:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src);
		events_out_sig.cts = false;
		events_out_sig.error = false;
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = false;
		events_out_sig.rxd_ready = false;
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_60:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_61:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_62:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_63:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_64:
		bus_out_sig.data = (ap_uint<32>)0;
		bus_out_sig.valid = false;
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && in_rx_active_out_msg);
		rx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		rx_config_out_sig.parity = PARITY(in_frame_config);
		rx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		tx_config_out_sig.odd_parity = ODD_PARITY(in_frame_config);
		tx_config_out_sig.parity = PARITY(in_frame_config);
		tx_config_out_sig.two_stop_bits = STOP(in_frame_config);
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && in_tx_control_out_msg.active);
		out_tx_control_out_msg.cts = false;
		events_out_notify = false;
		break;
	case IDLE_1_7:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = false;
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = false;
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = false;
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_rx) || ((in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_rx)))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && (((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || tasks_in_sig.start_tx) || ((in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data))))) && (!(tasks_in_sig.stop_tx)))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	case IDLE_1_9:
		bus_out_sig.data = (((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_CONFIG))?in_frame_config:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ENABLE))?in_enable:(((bus_in_sig.trans_type == READ) && (bus_in_sig.addr == ADDR_ERROR_SRC))?in_error_src:(ap_uint<32>)0)));
		bus_out_sig.valid = true;
		out_enable = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ENABLE))?ENABLE_MASK(bus_in_sig.data):in_enable);
		out_error_src = ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_ERROR_SRC))?ERROR_MASK(((~(bus_in_sig.data)) & in_error_src)):in_error_src) | rx_events_in_sig.error_src);
		events_out_sig.cts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && (!(cts_in_sig)));
		events_out_sig.error = (ENABLE_SET(in_enable) && (!((rx_events_in_sig.error_src == (ap_uint<32>)0))));
		events_out_sig.ncts = ((ENABLE_SET(in_enable) && HWFC(in_frame_config)) && cts_in_sig);
		events_out_sig.rx_timeout = (ENABLE_SET(in_enable) && rx_events_in_sig.timeout);
		events_out_sig.rxd_ready = (ENABLE_SET(in_enable) && rx_events_in_sig.ready);
		events_out_sig.txd_ready = (ENABLE_SET(in_enable) && tx_events_in_sig.done);
		out_frame_config = (((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config);
		out_rts_internal = in_rts_internal;
		out_rx_active_out_msg = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_RX)) && TASK_MASK(bus_in_sig.data)) || (in_rx_active_out_msg && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_RX)) && TASK_MASK(bus_in_sig.data)))))));
		rx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		rx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.odd_parity = ODD_PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.parity = PARITY((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		tx_config_out_sig.two_stop_bits = STOP((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_CONFIG))?CONFIG_MASK(bus_in_sig.data):in_frame_config));
		out_tx_control_out_msg.active = (ENABLE_SET(in_enable) && ((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_START_TX)) && TASK_MASK(bus_in_sig.data)) || (in_tx_control_out_msg.active && (!((((bus_in_sig.trans_type == WRITE) && (bus_in_sig.addr == ADDR_TASKS_STOP_TX)) && TASK_MASK(bus_in_sig.data)))))));
		out_tx_control_out_msg.cts = false;
		events_out_notify = true;
		break;
	}
}